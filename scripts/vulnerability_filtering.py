import re
import openai
import json
import os

def load_api_key():
    with open('configs/config.json', 'r') as f:
        config = json.load(f)
    return config['openai_api_key']

def filter_urls(urls, patterns):
    filtered_urls = {category: [] for category in patterns.keys()}
    
    for url in urls:
        for category, pattern in patterns.items():
            if re.search(pattern, url):
                filtered_urls[category].append(url)
    
    return filtered_urls

def ai_suggested_filtering(urls):
    openai.api_key = load_api_key()
    prompts = [f"Categorize this URL: {url}" for url in urls]
    responses = openai.Completion.create(
        engine="davinci-codex",
        prompt="\n".join(prompts),
        max_tokens=50,
        n=1,
        stop=None,
        temperature=0.5
    )
    suggestions = responses.choices[0].text.split('\n')
    ai_filtered_urls = {}
    for suggestion, url in zip(suggestions, urls):
        category = suggestion.split(':')[-1].strip()
        if category not in ai_filtered_urls:
            ai_filtered_urls[category] = []
        ai_filtered_urls[category].append(url)
    return ai_filtered_urls

def run():
    if not os.path.exists('output/categorized_urls'):
        os.makedirs('output/categorized_urls')

    with open('output/collected_urls.txt', 'r') as f:
        urls = f.read().splitlines()
    
    patterns = {
        "XSS": r"(script|alert|onload|onerror|javascript:)",
        "SQLi": r"(select|union|insert|update|delete|drop|exec)",
        "SSRF": r"(http://|https://|ftp://|file://|gopher://)",
        "Command Injection": r"(;|&&|\||`|\$\(.*\)|\$\{.*\})",
        "LFI": r"(file=|path=|folder=|root=|document=|dir=|page=|load=|view=|content=)",
        "RCE": r"(cmd=|exec=|execute=|run=|read=|ping=|query=|code=|do=|func=|arg=|option=|load=|process=|step=|function=|req=|feature=|exe=)",
        "Open Redirect": r"(url=|next=|redir=|redirect=|source=|to=|out=|view=|show=|go=|loc=|location=|file=|return=|goto=|target=|r=|u=|uri=|path=|src=)",
        "IDOR": r"(user=|account=|id=|profile=|uid=|userid=|username=|customer=|order=|number=|no=|doc=|email=|docid=|document=|file=|key=|session=|token=)"
    }
    
    filtered_urls = filter_urls(urls, patterns)
    ai_filtered_urls = ai_suggested_filtering(urls)

    for category, urls in {**filtered_urls, **ai_filtered_urls}.items():
        with open(f'output/categorized_urls/{category}.txt', 'w') as f:
            for url in urls:
                f.write(url + '\n')

if __name__ == "__main__":
    run()