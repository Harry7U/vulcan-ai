import subprocess
import concurrent.futures

def run_tool(tool, args):
    subprocess.run([tool] + args, shell=True)

def run(url, tools):
    tool_args = {
        "dalfox": ["-u", url, "-o", "output/testing_results/dalfox.txt"],
        "sqlmap": ["-u", url, "--batch", "-o", "output/testing_results/sqlmap.txt"],
        "commix": ["--url", url, "-o", "output/testing_results/commix.txt"],
        "Corsy": ["-u", url, "-o", "output/testing_results/corsy.txt"],
        "XSRFProbe": ["-u", url, "-o", "output/testing_results/xsrfprobe.txt"],
        "dotdotpwn": ["-m", "http", "-u", url, "-o", "output/testing_results/dotdotpwn.txt"],
        "liffy": ["-u", url, "-o", "output/testing_results/liffy.txt"],
        "GraphQLmap": ["-u", url, "-o", "output/testing_results/graphqlmap.txt"],
        "ysoserial": ["-u", url, "-o", "output/testing_results/ysoserial.txt"],
        "phpggc": ["-u", url, "-o", "output/testing_results/phpggc.txt"],
        "Autorize": ["-u", url, "-o", "output/testing_results/autorize.txt"],
        "Oralyzer": ["-u", url, "-o", "output/testing_results/oralyzer.txt"],
        "razzer": ["-u", url, "-o", "output/testing_results/razzer.txt"],
        "smuggler": ["-u", url, "-o", "output/testing_results/smuggler.txt"],
        "SSRFmap": ["-u", url, "-o", "output/testing_results/ssrfmap.txt"],
        "XSStrike": ["-u", url, "-o", "output/testing_results/xsstrike.txt"],
        "XXEinjector": ["-u", url, "-o", "output/testing_results/xxeinjector.txt"],
        "CRLFsuite": ["-u", url, "-o", "output/testing_results/crlfsuite.txt"],
        "tplmap": ["-u", url, "-o", "output/testing_results/tplmap.txt"],
        "nuclei": ["-u", url, "-o", "output/testing_results/nuclei.txt"],
        "CORStest": ["-u", url, "-o", "output/testing_results/corstest.txt"],
        "cors-scanner": ["-u", url, "-o", "output/testing_results/cors-scanner.txt"],
        "CRLF-Injection-Scanner": ["-u", url, "-o", "output/testing_results/crlf-injection-scanner.txt"],
        "Injectus": ["-u", url, "-o", "output/testing_results/injectus.txt"],
        "FDsploit": ["-u", url, "-o", "output/testing_results/fdsploit.txt"],
        "off-by-slash": ["-u", url, "-o", "output/testing_results/off-by-slash.txt"],
        "liffier": ["-u", url, "-o", "output/testing_results/liffier.txt"],
        "Burp-LFI-tests": ["-u", url, "-o", "output/testing_results/burp-lfi-tests.txt"],
        "LFI-Enum": ["-u", url, "-o", "output/testing_results/lfi-enum.txt"],
        "LFISuite": ["-u", url, "-o", "output/testing_results/lfisuite.txt"],
        "LFI-files": ["-u", url, "-o", "output/testing_results/lfi-files.txt"],
        "inql": ["-u", url, "-o", "output/testing_results/inql.txt"],
        "shapeshifter": ["-u", url, "-o", "output/testing_results/shapeshifter.txt"],
        "graphql_beautifier": ["-u", url, "-o", "output/testing_results/graphql_beautifier.txt"],
        "clairvoyance": ["-u", url, "-o", "output/testing_results/clairvoyance.txt"],
        "tplmap": ["-u", url, "-o", "output/testing_results/tplmap.txt"],
        "SSTImap": ["-u", url, "-o", "output/testing_results/sstimap.txt"]
    }
    
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = [executor.submit(run_tool, tool, tool_args[tool]) for tool in tools if tool in tool_args]
        concurrent.futures.wait(futures)

if __name__ == "__main__":
    run()